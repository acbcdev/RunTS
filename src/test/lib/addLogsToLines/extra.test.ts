import { injectLogsIntoCode } from "@/lib/addLogsToLines"; // Ajusta la ruta
import { describe, it, expect } from "vitest"; // Importa las funciones de Vitest

describe("injectLogsIntoCode E2E Tests (Vitest)", () => {
	// Bloque describe, Â¡igual!

	it("DeberÃ­a inyectar console.log en un ExpressionStatement simple", () => {
		// Caso de test it, Â¡igual!
		const inputCode = "1 + 1;";
		const expectedCode = "console.log(1 + 1)";
		const result = injectLogsIntoCode(inputCode, { injectLogs: true });
		expect(result.code.trim()).toBe(expectedCode.trim()); // Assertions con expect, Â¡muy similar!
	});

	it("No deberÃ­a inyectar console.log si la opciÃ³n injectLogs es false", () => {
		const inputCode = "1 + 1;";
		const expectedCode = "1 + 1;";
		const result = injectLogsIntoCode(inputCode, { injectLogs: false });
		expect(result.code.trim()).toBe(expectedCode.trim());
	});

	it("DeberÃ­a manejar cÃ³digo con console.log existente sin duplicarlos", () => {
		const inputCode = 'console.log("Hola");\n2 + 2;';
		const expectedCode = 'console.log("Hola");\nconsole.log(2 + 2)';
		const result = injectLogsIntoCode(inputCode, { injectLogs: true });
		expect(result.code.trim()).toBe(expectedCode.trim());
		expect(result.lines).toEqual([1, 2]);
	});

	it("DeberÃ­a funcionar con expresiones multilÃ­nea", () => {
		const inputCode = `
      let x = 10;
      x +
      20; // ExpresiÃ³n multilÃ­nea
    `;
		const expectedCode = `
      let x = 10;
      console.log(x + 20) // ExpresiÃ³n multilÃ­nea
    `;
		const result = injectLogsIntoCode(inputCode.trim(), { injectLogs: true });
		expect(result.code).toBe(expectedCode.trim());
	});

	it("Should handle if statements and maintain their structure", () => {
		const inputCode = `
      let x = 5;
      if (x > 3) {
        x + 1;
        x * 2;
      }
    `;
		const expectedCode = `
      let x = 5;
      if (x > 3) {
        x + 1;
        x * 2;
      }
    `;
		const result = injectLogsIntoCode(inputCode, { injectLogs: true });
		expect(result.code).toBe(expectedCode);
	});
	it("Error Code", () => {
		const inputCode = `
'Â¡Hola, RunTS! ðŸŒŸ';

[1, 2, 3].map((x) => x * 2);

475 + 465;`;
		const expectedCode = `console.log('Â¡Hola, RunTS! ðŸŒŸ')
console.log([1, 2, 3].map((x) => x * 2))

console.log(475 + 465);`;
		const result = injectLogsIntoCode(inputCode, { injectLogs: true });
		expect(result.code).toBe(expectedCode);
	});
});
